


::2020-09::Number::



square of self:
	result self * self



::2020-09::Function::



selfsame of self:
	result self



::2020-09::Iterable::



resultFromEach of self with ...parameters -> mapping:
	iterator = iterator of self
	result resultFromEach of iterator with mapping



::2020-09::Iterate::



resultFromEach of self with ...parameters -> mapping:
	for each x in self,
		collect resultFrom (mapping in x)



::2020-09::Numbers::



use infinity


countingFrom self:
	for each number in infinity,
		collect self + number


numbersLessThan self:
	for each number in extent of self,
		collect number


numbersGreaterThan self:
	for each number in countingFrom self,
		collect number + 1


countingTo self:
	for each number in numbersLessThan self,
		collect number + 1


evenNumbersLessThan self:
	for each number in extent of roundingUp (self / 2),
		collect number * 2


oddNumbersLessThan self:
	for each number in extent of roundingDown (self / 2),
		collect (number * 2) + 1



::2020-09::Rocket::



use category,
    errors,
    log,
    harness,
    blaster,
    turbo,
    offset


engageBoosters of self with thrust,
                            angle  otherwise 0.0,
                            color  otherwise 'green':

	checksResult = preCheck blaster with angle, thrust

	add log with info: 'Hi {name}! Your favourite drink is {drink}.'

	turboState = state of turbo with { angle, thrust,
	                                   size: usage of self } otherwise default 'poor'

	when turboState
		is 'good':
			add log with info: 'Turbo is go!'
			result launchBoosters of self with angle, thrust, turboState

		is 'okay':
			add log with warning: 'Turbo is iffy :/'
			result launchBoosters of self with angle, thrust, turboState

		otherwise:
			result 'stopped'


launchBoosters of self with thrust,
                            angle      otherwise 0.0,
                            turboState otherwise 'unknown':

	variable = new of category.data
	variable.stage = 0

	numbers = [1, 2, 3]
	variable.cache = resultFromEach of numbers with square

	for each x in turbo, do:
		variable.stage =+ 1
		engage turbo with thruster: x

	result boost blaster with { stage:. variable, thrust,
	                            angle, offset, color } otherwise default 'done'


