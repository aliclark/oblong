


::2020-09::Number::



square of self:
	result self ** 2


cube of self:
	result self ** 3



::2020-09::Function::



selfsame of self:
	result self



::2020-09::Iterator::



resultFromEach of self with ...parameters -> mapping:
	iterator = iterator of self
	result resultFromEach of iterator with mapping



::2020-09::Iteration::



resultFromEach of self with ...parameters -> mapping:
	for each x in self,
		collect resultOf (mapping in x)



::2020-09::Sequences::



use infinity


evenNumbers:
	for each number in infinity,
		collect number * 2


oddNumbers:
	for each number in evenNumbers,
		collect number + 1


power of self:
	for each number in infinity,
		collect self ** number


factorial:
	for each n through infinity,
		when n
			is 0:      collect 1
			otherwise: collect n * (factorial (n - 1))


note:`The benefit using a 'through' sequence than a plain function is language-provided memoization.
      A nice property here is that recursion is allowed but only in the very narrow sense of f(N).
      Because 'through' works from 0->infinity, it does not actually recurse deeply, as f(n-1) is already memoized.`
fibonacci:
	for each n through infinity,
		when n
			is 0: collect 0
			is 1: collect 1
			otherwise: collect (fibonacci (n - 1)) + (fibonacci (n - 2))


lucas:
	for each n through infinity,
		when n
			is 0: collect 2
			is 1: collect 1
			otherwise: collect (lucas (n - 1)) + (lucas (n - 2))



::2020-09::Ranges::



use infinity


countingFrom self with numbersLessThan (otherwise default infinity):
	length = numbersLessThan - self
	for each number in infinity, to extent of length,
		collect self + number


numbersLessThan self:
	for each number in infinity, to extent of self,
		collect number


numbersGreaterThan self:
	for each number in countingFrom self,
		collect number + 1


countingTo self:
	for each number in numbersLessThan self,
		collect number + 1



::2020-09::Numbers::



use evenNumbers,
    oddNumbers


evenNumbersLessThan self:
	for each number in evenNumbers, to extent of roundedUp (self / 2),
		collect number


oddNumbersLessThan self:
	for each number in oddNumbers, to extent of roundedDown (self / 2),
		collect number



::2020-09::Aliquot::



use category,
    error


aliquotSum of self:
	when self
		is 1: result 0

		otherwise:
			variable:sum = 1

			...{ squareRoot of self }

			for each number in countingFrom 2 with numbersLessThan: squareRoot, do:
				when remainder of self with divisor: number
					is 0:
						variable:sum =+ number + (self / number)

			when square of roundedDown squareRoot
				is self:
					variable:sum =+ squareRoot

			result variable:sum


aliquotClassification of self:
	when compare self with number: 1
		is 'less':
			result error 'Input must be a positive integer'
		otherwise:
			when compare (aliquotSum of self) with self
				is 'less':    result 'deficient'
				is 'greater': result 'abundant'
				otherwise:    result 'perfect'



::2020-09::Rocket::



use category,
    errors,
    log,
    harness,
    blaster,
    turbo,
    offset


launchBoosters of self with thrust,
                            angle      (otherwise default 0.0),
                            turboState (otherwise default 'unknown'):
	numbers = [1, 2, 3]

	variable:stage = 0
	variable:cache = resultFromEach of numbers with square

	variable:...{ resultFromEach of numbers with square }

	for each x in turbo, do:
		variable:stage =+ 1
		engage turbo with thruster: x

	result boost blaster with { ...{ stage }: variable,
	                            thrust, angle, offset, color } otherwise default 'done'


engageBoosters of self with thrust,
                            angle (otherwise default 0.0),
                            color (otherwise default 'green'):

	checksResult = preCheck blaster with angle, thrust

	add log with info: 'Hi {name}! Your favourite drink is {drink}.'

	...{ state of turbo with { angle, thrust,
	                           size: usage of self } otherwise default 'poor' }

	when state
		is 'good':
			add log with info: 'Turbo is go!'
			result launchBoosters of self with angle, thrust, state

		is 'okay':
			add log with warning: 'Turbo is iffy :/'
			result launchBoosters of self with angle, thrust, state

		otherwise:
			result 'stopped'


